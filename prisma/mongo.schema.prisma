// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String    @unique
  picture                String
  role                   String    @default("user")
  provider               String    @default("default")
  password               String?
  verified               Boolean   @default(false)
  suspended              Boolean   @default(false)
  requestedPasswordReset Boolean   @default(false)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  sessions               Session[]
  projects               Project[]
  devices                Device[]
  mqtt                   Mqtt?
  report                 Report?
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uid       String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Mqtt {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uriTCP    String?
  uriWS     String
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Report {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  webhookEnable Boolean  @default(false)
  webhookUrl    String?
  emailEnable   Boolean  @default(false)
  emailAddress  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  apiKey      String?
  repository  String?
  description String?
  variables   String?
  commands    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  releases    Release[]
  devices     Device[]

  @@unique([name, userId])
}

model Release {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  downloadPath String
  version      String
  createdAt    DateTime     @default(now())
  projectId    String       @db.ObjectId
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deployments  Deployment[]

  @@unique([version, projectId])
}

model Device {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  apiKey      String
  description String?
  variables   String?
  status      String       @default("unregistered")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projectId   String?      @db.ObjectId
  project     Project?     @relation(fields: [projectId], references: [id])
  userId      String       @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  deployments Deployment[]

  @@unique([name, userId])
}

model Deployment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    String   @default("started")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deviceId  String   @db.ObjectId
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  releaseId String   @db.ObjectId
  release   Release  @relation(fields: [releaseId], references: [id], onDelete: Cascade)
}
